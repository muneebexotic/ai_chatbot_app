import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/photo_service.dart';
import '../services/cloudinary_service.dart';
import '../providers/auth_provider.dart';
import 'chat_screen.dart';

class PhotoUploadScreen extends StatefulWidget {
  const PhotoUploadScreen({super.key});

  @override
  State<PhotoUploadScreen> createState() => _PhotoUploadScreenState();
}

class _PhotoUploadScreenState extends State<PhotoUploadScreen> {
  final PhotoService _photoService = PhotoService();
  final CloudinaryService _cloudinaryService = CloudinaryService();
  File? _selectedImage;
  String? _avatarUrl;
  bool _isLoading = false;
  bool _isUploading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,
      appBar: AppBar(
        title: const Text('Profile Photo'),
        backgroundColor: Colors.transparent,
        elevation: 0,
        actions: [
          TextButton(
            onPressed: _isUploading ? null : _skipPhotoUpload,
            child: Text(
              'Skip',
              style: TextStyle(
                color: _isUploading 
                    ? Colors.grey 
                    : Theme.of(context).primaryColor,
                fontWeight: FontWeight.w600,
              ),
            ),
          ),
        ],
      ),
      body: SafeArea(
        child: Padding(
          padding: const EdgeInsets.all(24.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const SizedBox(height: 20),
              Text(
                'Add a Profile Photo',
                style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                  fontWeight: FontWeight.bold,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),
              Text(
                'Help others recognize you by adding a profile photo',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                  color: Colors.grey[600],
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 40),
              _buildPhotoPreview(),
              const SizedBox(height: 40),
              _buildPhotoOptions(),
              const Spacer(),
              _buildContinueButton(),
              const SizedBox(height: 16),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildPhotoPreview() {
    return Container(
      width: 150,
      height: 150,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: Colors.grey[300]!,
          width: 2,
        ),
      ),
      child: ClipOval(
        child: _selectedImage != null
            ? Image.file(
                _selectedImage!,
                width: 150,
                height: 150,
                fit: BoxFit.cover,
              )
            : _avatarUrl != null
                ? Image.network(
                    _avatarUrl!,
                    width: 150,
                    height: 150,
                    fit: BoxFit.cover,
                    loadingBuilder: (context, child, loadingProgress) {
                      if (loadingProgress == null) return child;
                      return const Center(
                        child: CircularProgressIndicator(),
                      );
                    },
                  )
                : Container(
                    color: Colors.grey[100],
                    child: Icon(
                      Icons.person,
                      size: 80,
                      color: Colors.grey[400],
                    ),
                  ),
      ),
    );
  }

  Widget _buildPhotoOptions() {
    return Column(
      children: [
        _buildOptionButton(
          icon: Icons.camera_alt,
          title: 'Take Photo',
          subtitle: 'Use camera to take a new photo',
          onTap: _isLoading ? null : _pickImageFromCamera,
        ),
        const SizedBox(height: 16),
        _buildOptionButton(
          icon: Icons.photo_library,
          title: 'Choose from Gallery',
          subtitle: 'Select from your photo library',
          onTap: _isLoading ? null : _pickImageFromGallery,
        ),
        const SizedBox(height: 16),
        _buildOptionButton(
          icon: Icons.shuffle,
          title: 'Generate Avatar',
          subtitle: 'Get a random avatar',
          onTap: _isLoading ? null : _generateRandomAvatar,
        ),
      ],
    );
  }

  Widget _buildOptionButton({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback? onTap,
  }) {
    return InkWell(
      onTap: onTap,
      borderRadius: BorderRadius.circular(12),
      child: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          border: Border.all(color: Colors.grey[300]!),
          borderRadius: BorderRadius.circular(12),
        ),
        child: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).primaryColor.withOpacity(0.1),
                shape: BoxShape.circle,
              ),
              child: Icon(
                icon,
                color: Theme.of(context).primaryColor,
                size: 24,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: const TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 16,
                    ),
                  ),
                  const SizedBox(height: 4),
                  Text(
                    subtitle,
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 14,
                    ),
                  ),
                ],
              ),
            ),
            if (_isLoading)
              const SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(strokeWidth: 2),
              )
            else
              Icon(
                Icons.arrow_forward_ios,
                color: Colors.grey[400],
                size: 16,
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildContinueButton() {
    final hasPhoto = _selectedImage != null || _avatarUrl != null;
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: hasPhoto && !_isUploading ? _continueToChat : null,
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 16),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12),
          ),
          backgroundColor: hasPhoto 
              ? Theme.of(context).primaryColor 
              : Colors.grey[300],
        ),
        child: _isUploading
            ? const SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              )
            : Text(
                'Continue',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.w600,
                  color: hasPhoto ? Colors.white : Colors.grey[600],
                ),
              ),
      ),
    );
  }

  Future<void> _pickImageFromCamera() async {
    setState(() => _isLoading = true);
    try {
      final image = await _photoService.pickImageFromCamera();
      if (image != null && _photoService.validateImage(image)) {
        setState(() {
          _selectedImage = image;
          _avatarUrl = null;
        });
      }
    } catch (e) {
      _showErrorSnackBar('Error taking photo: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _pickImageFromGallery() async {
    setState(() => _isLoading = true);
    try {
      final image = await _photoService.pickImageFromGallery();
      if (image != null && _photoService.validateImage(image)) {
        setState(() {
          _selectedImage = image;
          _avatarUrl = null;
        });
      }
    } catch (e) {
      _showErrorSnackBar('Error selecting photo: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _generateRandomAvatar() async {
    setState(() => _isLoading = true);
    try {
      final avatarUrl = await _photoService.generateRandomAvatar();
      setState(() {
        _avatarUrl = avatarUrl;
        _selectedImage = null;
      });
    } catch (e) {
      _showErrorSnackBar('Error generating avatar: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _continueToChat() async {
    setState(() => _isUploading = true);
    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);

      // Check if user is authenticated
      if (authProvider.currentUser?.uid == null || authProvider.currentUser!.uid.isEmpty) {
        throw Exception('❌ User is not authenticated.');
      }

      // Upload image or set avatar
      if (_selectedImage != null) {
        final imageUrl = await _cloudinaryService.uploadImage(_selectedImage!);
        if (imageUrl != null) {
          await authProvider.setUserAvatar(imageUrl);
        } else {
          throw Exception('❌ Cloudinary upload failed');
        }
      } else if (_avatarUrl != null) {
        await authProvider.setUserAvatar(_avatarUrl!);
      }

      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const ChatScreen()),
        );
      }
    } catch (e) {
      _showErrorSnackBar('Error: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  Future<void> _skipPhotoUpload() async {
    setState(() => _isUploading = true);
    try {
      final avatarUrl = await _photoService.generateRandomAvatar();
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      await authProvider.setUserAvatar(avatarUrl);
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const ChatScreen()),
        );
      }
    } catch (e) {
      _showErrorSnackBar('Error creating avatar: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}
