import 'dart:io';
import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../services/photo_service.dart';
import '../services/cloudinary_service.dart';
import '../providers/auth_provider.dart';
import '../components/ui/app_text.dart';
import '../utils/app_theme.dart';
import 'chat_screen.dart';
import 'package:flutter_svg/flutter_svg.dart'; 

class PhotoUploadScreen extends StatefulWidget {
  const PhotoUploadScreen({super.key});

  @override
  State<PhotoUploadScreen> createState() => _PhotoUploadScreenState();
}

class _PhotoUploadScreenState extends State<PhotoUploadScreen> {
  final PhotoService _photoService = PhotoService();
  final CloudinaryService _cloudinaryService = CloudinaryService();
  File? _selectedImage;
  String? _avatarUrl;
  bool _isLoading = false;
  bool _isUploading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              AppColors.background,
              AppColors.surface,
              AppColors.background,
            ],
            stops: const [0.0, 0.5, 1.0],
          ),
        ),
        child: Column(
          children: [
            // Custom App Bar
            SafeArea(
              bottom: false,
              child: Container(
                decoration: BoxDecoration(
                  color: AppColors.background.withOpacity(0.9),
                  border: Border(
                    bottom: BorderSide(
                      color: AppColors.primary.withOpacity(0.1),
                    ),
                  ),
                ),
                child: AppBar(
                  backgroundColor: Colors.transparent,
                  elevation: 0,
                  leading: const SizedBox(), // No back button for onboarding
                  title: AppText.bodyLarge(
                    'Profile Photo',
                    color: AppColors.textPrimary,
                    fontWeight: FontWeight.w600,
                  ),
                  centerTitle: true,
                  actions: [
                    Padding(
                      padding: const EdgeInsets.only(right: 16),
                      child: TextButton(
                        onPressed: _isUploading ? null : _skipPhotoUpload,
                        child: AppText.bodyMedium(
                          'Skip',
                          color: _isUploading 
                              ? AppColors.textTertiary 
                              : AppColors.primary,
                          fontWeight: FontWeight.w600,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
            ),
            
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(24),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    const SizedBox(height: 20),
                    
                    // Header Section
                    Container(
                      width: double.infinity,
                      padding: const EdgeInsets.all(32),
                      decoration: BoxDecoration(
                        color: AppColors.surface,
                        borderRadius: BorderRadius.circular(24),
                        border: Border.all(color: AppColors.primary.withOpacity(0.2)),
                        boxShadow: [
                          BoxShadow(
                            color: AppColors.primary.withOpacity(0.1),
                            blurRadius: 20,
                            offset: const Offset(0, 4),
                          ),
                        ],
                      ),
                      child: Column(
                        children: [
                          Container(
                            padding: const EdgeInsets.all(16),
                            decoration: BoxDecoration(
                              color: AppColors.primary.withOpacity(0.1),
                              borderRadius: BorderRadius.circular(16),
                            ),
                            child: Icon(
                              Icons.person_add,
                              size: 32,
                              color: AppColors.primary,
                            ),
                          ),
                          const SizedBox(height: 20),
                          AppText.displayMedium(
                            'Add a Profile Photo',
                            color: AppColors.textPrimary,
                            fontWeight: FontWeight.bold,
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 12),
                          AppText.bodyMedium(
                            'Help others recognize you by adding a profile photo or generating a unique avatar',
                            color: AppColors.textSecondary,
                            textAlign: TextAlign.center,
                          ),
                        ],
                      ),
                    ),
                    
                    const SizedBox(height: 40),
                    
                    // Photo Preview
                    _buildPhotoPreview(),
                    
                    const SizedBox(height: 40),
                    
                    // Photo Options
                    _buildPhotoOptions(),
                    
                    const SizedBox(height: 40),
                    
                    // Continue Button
                    _buildContinueButton(),
                    
                    const SizedBox(height: 24),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPhotoPreview() {
    return Container(
      width: 160,
      height: 160,
      decoration: BoxDecoration(
        shape: BoxShape.circle,
        border: Border.all(
          color: AppColors.primary.withOpacity(0.3),
          width: 3,
        ),
        boxShadow: [
          BoxShadow(
            color: AppColors.primary.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: ClipOval(
        child: _selectedImage != null
            ? Image.file(
                _selectedImage!,
                width: 160,
                height: 160,
                fit: BoxFit.cover,
              )
            : _avatarUrl != null
                ? _buildAvatarWidget()
                : Container(
                    color: AppColors.surface,
                    child: Icon(
                      Icons.person,
                      size: 80,
                      color: AppColors.textTertiary,
                    ),
                  ),
      ),
    );
  }

  Widget _buildAvatarWidget() {
    // Check if the URL is an SVG (DiceBear returns SVG)
    if (_avatarUrl!.contains('.svg') || _avatarUrl!.contains('dicebear')) {
      return SvgPicture.network(
        _avatarUrl!,
        width: 160,
        height: 160,
        fit: BoxFit.cover,
        placeholderBuilder: (context) => Container(
          color: AppColors.surface,
          child: const Center(
            child: CircularProgressIndicator(),
          ),
        ),
      );
    } else {
      // For regular images (PNG, JPG, etc.)
      return Image.network(
        _avatarUrl!,
        width: 160,
        height: 160,
        fit: BoxFit.cover,
        loadingBuilder: (context, child, loadingProgress) {
          if (loadingProgress == null) return child;
          return Container(
            color: AppColors.surface,
            child: const Center(
              child: CircularProgressIndicator(),
            ),
          );
        },
        errorBuilder: (context, error, stackTrace) {
          return Container(
            color: AppColors.surface,
            child: Icon(
              Icons.error,
              size: 40,
              color: AppColors.textTertiary,
            ),
          );
        },
      );
    }
  }

  Widget _buildPhotoOptions() {
    return Container(
      decoration: BoxDecoration(
        color: AppColors.surface,
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: AppColors.primary.withOpacity(0.1)),
        boxShadow: [
          BoxShadow(
            color: AppColors.primary.withOpacity(0.05),
            blurRadius: 10,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        children: [
          _buildOptionButton(
            icon: Icons.camera_alt_outlined,
            title: 'Take Photo',
            subtitle: 'Use camera to take a new photo',
            onTap: _isLoading ? null : _pickImageFromCamera,
            isFirst: true,
          ),
          _buildDivider(),
          _buildOptionButton(
            icon: Icons.photo_library_outlined,
            title: 'Choose from Gallery',
            subtitle: 'Select from your photo library',
            onTap: _isLoading ? null : _pickImageFromGallery,
          ),
          _buildDivider(),
          _buildOptionButton(
            icon: Icons.shuffle_outlined,
            title: 'Generate Avatar',
            subtitle: 'Get a unique AI-generated avatar',
            onTap: _isLoading ? null : _generateRandomAvatar,
            isLast: true,
          ),
        ],
      ),
    );
  }

  Widget _buildDivider() {
    return Container(
      height: 1,
      margin: const EdgeInsets.symmetric(horizontal: 20),
      color: AppColors.primary.withOpacity(0.1),
    );
  }

  Widget _buildOptionButton({
    required IconData icon,
    required String title,
    required String subtitle,
    required VoidCallback? onTap,
    bool isFirst = false,
    bool isLast = false,
  }) {
    return Material(
      color: Colors.transparent,
      child: InkWell(
        onTap: onTap,
        borderRadius: BorderRadius.vertical(
          top: isFirst ? const Radius.circular(20) : Radius.zero,
          bottom: isLast ? const Radius.circular(20) : Radius.zero,
        ),
        child: Container(
          padding: const EdgeInsets.all(20),
          child: Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: AppColors.primary.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  icon,
                  color: AppColors.primary,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    AppText.bodyLarge(
                      title,
                      color: AppColors.textPrimary,
                      fontWeight: FontWeight.w600,
                    ),
                    const SizedBox(height: 4),
                    AppText.bodySmall(
                      subtitle,
                      color: AppColors.textSecondary,
                    ),
                  ],
                ),
              ),
              if (_isLoading)
                SizedBox(
                  width: 20,
                  height: 20,
                  child: CircularProgressIndicator(
                    strokeWidth: 2,
                    valueColor: AlwaysStoppedAnimation<Color>(AppColors.primary),
                  ),
                )
              else
                Icon(
                  Icons.arrow_forward_ios,
                  color: AppColors.textTertiary,
                  size: 16,
                ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildContinueButton() {
    final hasPhoto = _selectedImage != null || _avatarUrl != null;
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: hasPhoto && !_isUploading ? _continueToChat : null,
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 18),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(16),
          ),
          backgroundColor: hasPhoto 
              ? AppColors.primary 
              : AppColors.textTertiary,
          elevation: hasPhoto ? 2 : 0,
          shadowColor: AppColors.primary.withOpacity(0.3),
        ),
        child: _isUploading
            ? SizedBox(
                height: 20,
                width: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(AppColors.background),
                ),
              )
            : AppText.bodyLarge(
                'Continue',
                color: hasPhoto ? AppColors.background : AppColors.textSecondary,
                fontWeight: FontWeight.w600,
              ),
      ),
    );
  }

  Future<void> _pickImageFromCamera() async {
    setState(() => _isLoading = true);
    try {
      final image = await _photoService.pickImageFromCamera();
      if (image != null && _photoService.validateImage(image)) {
        setState(() {
          _selectedImage = image;
          _avatarUrl = null;
        });
      }
    } catch (e) {
      _showErrorSnackBar('Error taking photo: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _pickImageFromGallery() async {
    setState(() => _isLoading = true);
    try {
      final image = await _photoService.pickImageFromGallery();
      if (image != null && _photoService.validateImage(image)) {
        setState(() {
          _selectedImage = image;
          _avatarUrl = null;
        });
      }
    } catch (e) {
      _showErrorSnackBar('Error selecting photo: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _generateRandomAvatar() async {
    setState(() => _isLoading = true);
    try {
      final avatarUrl = await _photoService.generateRandomAvatar();
      setState(() {
        _avatarUrl = avatarUrl;
        _selectedImage = null;
      });
    } catch (e) {
      _showErrorSnackBar('Error generating avatar: ${e.toString()}');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  Future<void> _continueToChat() async {
    setState(() => _isUploading = true);
    try {
      final authProvider = Provider.of<AuthProvider>(context, listen: false);

      // Check if user is authenticated
      if (authProvider.currentUser?.uid == null || authProvider.currentUser!.uid.isEmpty) {
        throw Exception('❌ User is not authenticated.');
      }

      // Upload image or set avatar
      if (_selectedImage != null) {
        final imageUrl = await _cloudinaryService.uploadImage(_selectedImage!);
        if (imageUrl != null) {
          await authProvider.setUserAvatar(imageUrl);
        } else {
          throw Exception('❌ Cloudinary upload failed');
        }
      } else if (_avatarUrl != null) {
        await authProvider.setUserAvatar(_avatarUrl!);
      }

      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const ChatScreen()),
        );
      }
    } catch (e) {
      _showErrorSnackBar('Error: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  Future<void> _skipPhotoUpload() async {
    setState(() => _isUploading = true);
    try {
      final avatarUrl = await _photoService.generateRandomAvatar();
      final authProvider = Provider.of<AuthProvider>(context, listen: false);
      await authProvider.setUserAvatar(avatarUrl);
      if (mounted) {
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => const ChatScreen()),
        );
      }
    } catch (e) {
      _showErrorSnackBar('Error creating avatar: ${e.toString()}');
    } finally {
      if (mounted) {
        setState(() => _isUploading = false);
      }
    }
  }

  void _showErrorSnackBar(String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: AppColors.error,
          behavior: SnackBarBehavior.floating,
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
      );
    }
  }
}